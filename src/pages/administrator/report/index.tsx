import { api } from "@/utils/api";
import { type reporting } from "@prisma/client";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { Table, Badge, Group, Menu, ActionIcon } from "@mantine/core";
import { useRouter } from "next/router";
import { Trash2, ClipboardCheck, RefreshCcw } from "lucide-react";
import { IconPencil, IconDots } from "@tabler/icons-react";

const Index = () => {
  const router = useRouter();
  const sessions = useSession();

  const list = api.report.getAdmin.useQuery();
  const listDelete = api.report.delete.useMutation();
  const listUpdate = api.report.updateReview.useMutation();
  const listComplete = api.report.completeReview.useMutation();
  function deleteHandle({ id }: { id: number }) {
    void listDelete.mutateAsync({ id: id }).then(() => {
      void router.reload();
    });
  }

  function completeHandle({
    id,
    updatedAt,
  }: {
    id: number;
    status_report: string;
    updatedAt: Date;
  }) {
    void listComplete
      .mutateAsync({
        id: id,
        status_report: "complete",
        updatedAt: updatedAt,
      })
      .then(() => {
        void router.reload();
      });
  }

  function reviewHandle({
    id,
    updatedAt,
  }: {
    id: number;
    status_report: string;
    updatedAt: Date;
  }) {
    void listUpdate
      .mutateAsync({
        id: id,
        status_report: "review",
        updatedAt: updatedAt,
      })
      .then(() => {
        void router.reload();
      });
  }

  const { data: session, status } = useSession();
  if (status !== "authenticated") {
    return null;
  }

  const jobColors: Record<string, string> = {
    review: "blue",
    progress: "pink",
    complete: "cyan",
  };
  if (sessions.data?.user.role !== "admin") {
    return <h1>not authorized</h1>;
  }
  function listingReport({ report }: { report: reporting }) {
    return (
      <>
        <Table.Tr key={report.id}>
          <Table.Td>{report.title}</Table.Td>
          <Table.Td>{report.type}</Table.Td>
          <Table.Td>{report.userId}</Table.Td>
          <Table.Td>{report.createdAt.toLocaleString()}</Table.Td>
          <Table.Td>{report.description}</Table.Td>
          <Table.Td>
            <Badge
              color={jobColors[report.status_report.toLowerCase()]}
              variant="light"
            >
              {report.status_report.toLowerCase()}
            </Badge>
          </Table.Td>

          <Table.Td>
            <Group gap={0} justify="flex-end">
              <ActionIcon variant="subtle" color="gray">
                <IconPencil style={{ width: 16, height: 16 }} stroke={1.5} />
              </ActionIcon>
              <Menu
                transitionProps={{ transition: "pop" }}
                withArrow
                position="bottom-end"
                withinPortal
              >
                <Menu.Target>
                  <ActionIcon variant="subtle" color="gray">
                    <IconDots style={{ width: 16, height: 16 }} stroke={1.5} />
                  </ActionIcon>
                </Menu.Target>
                <Menu.Dropdown>
                  <Menu.Item
                    leftSection={<ClipboardCheck width={17} />}
                    onClick={() => completeHandle(report)}
                  >
                    Complete
                  </Menu.Item>
                  <Menu.Item
                    leftSection={<RefreshCcw width={17} />}
                    onClick={() => reviewHandle(report)}
                  >
                    Review
                  </Menu.Item>

                  <Menu.Item
                    leftSection={<Trash2 color="#ff7d78" width={17} />}
                    onClick={() => deleteHandle(report)}
                    color="red"
                  >
                    Delete Report
                  </Menu.Item>
                </Menu.Dropdown>
              </Menu>
            </Group>
          </Table.Td>
        </Table.Tr>
      </>
    );
  }

  return (
    <>
      <Head>
        <title>Report</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className=" m-auto flex w-full items-center justify-center">
        <div className="flex">
          <Table>
            <Table.Thead>
              <Table.Tr>
                <Table.Th>Report Title</Table.Th>
                <Table.Th>Type Crash</Table.Th>
                <Table.Th>User Id</Table.Th>
                <Table.Th>Created At</Table.Th>
                <Table.Th>Description</Table.Th>
                <Table.Th>Status</Table.Th>
                <Table.Th>Action</Table.Th>
              </Table.Tr>
            </Table.Thead>
            <Table.Tbody>
              {list.data?.map((report) => {
                return listingReport({ report });
              })}
            </Table.Tbody>
          </Table>
        </div>
      </div>
      ,
    </>
  );
};

export default Index;
